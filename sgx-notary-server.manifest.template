# Copyright (C) 2023 Gramine contributors
# SPDX-License-Identifier: BSD-3-Clause

# Rust manifest example

loader.entrypoint = "file:{{ gramine.libos }}"
loader.argv = [
  "gramine-ratls", "/tmp/crt.pem", "/tmp/key.pem", "--",
    "/home/ecs-user/sgx-tlsn-notary-server/target/release/sgx-notary-server", "--config-file", "config/config.yaml",
]

libos.entrypoint = "/gramine-ratls"

loader.log_level = "{{ log_level }}"

loader.env.LD_LIBRARY_PATH = "/lib:{{ arch_libdir }}"

loader.uid = 65534
loader.gid = 65534


# For easier debugging — not strictly required to run this workload
loader.env.RUST_BACKTRACE = "full"

fs.mounts = [
  { path = "/gramine-ratls", uri = "file:{{ entrypoint }}" },
  { path = "/lib", uri = "file:{{ gramine.runtimedir() }}" },
  { path = "/home/ecs-user/sgx-tlsn-notary-server/target/release", uri = "file:/home/ecs-user/sgx-tlsn-notary-server/target/release"},
  { path = "{{ arch_libdir }}", uri = "file:{{ arch_libdir }}" },
  { path = "/tmp", type = "tmpfs" },


]

sgx.edmm_enable = {{ 'true' if env.get('EDMM', '0') == '1' else 'false' }}
sgx.remote_attestation = "dcap"

sys.enable_sigterm_injection = true	

sgx.allowed_files = [
"file:/home/ecs-user/sgx-tlsn-notary-server/fixture/pkcs8.pem",
"file:/home/ecs-user/sgx-tlsn-notary-server/fixture/maybe.cert.pem",
]

sgx.trusted_files = [
  "file:{{ gramine.libos }}",
  "file:{{ entrypoint }}",
  "file:{{ self_exe }}",
  "file:{{ gramine.runtimedir() }}/",
  "file:{{ arch_libdir }}/",
  "file:config/config.yaml",
  "file:fixture/notary/notary.key",
    "file:/usr/bin/gramine-ratls",
  "file:/tmp/crt.pem",
  "file:fixture/notary/notary.pub",
  "file:fixture/auth/whitelist.csv",
  "file:fixture/tls/notary.crt",
  "file:fixture/tls/notary.csr",
  "file:fixture/tls/notary.ext",
  "file:fixture/tls/pkcs8.pem",
  "file:fixture/tls/rootCA.crt",
  "file:fixture/tls/rootCA.key",
  "file:fixture/tls/rootCA.srl",
"file:/home/ecs-user/sgx-tlsn-notary-server/target/release/sgx-notary-server",
]

# The Tokio runtime requires eventfd, and the Gramine implementation
# currently relies on the host in an insecure manner. This setting isn't
# suitable for production deployment, but works well as a stopgap during
# development while a proper implementation in Gramine is being worked on.
sys.insecure__allow_eventfd = true

# The maximum number of threads in a single process needs to be declared in advance.
# You need to account for:
# - one main thread
# - the tokio worker threads
# - any threads and threadpools you might be starting
# - helper threads internal to Gramine — see:
#   https://gramine.readthedocs.io/en/stable/manifest-syntax.html#number-of-threads
sgx.max_threads = {{ '2' if env.get('EDMM', '0') == '1' else '8' }}
